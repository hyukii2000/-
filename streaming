import cv2
import os
import time
import subprocess

# 블루투스 서버로 파일 전송을 위한 함수
def send_file_bt(file_path):
    subprocess.call(['sudo', 'bluetooth-sendto', '--device=<device-mac-address>', file_path])

# 얼굴 인식을 위한 캐스케이드 파일 경로
face_cascade_path = '/usr/share/opencv/haarcascades/haarcascade_frontalface_default.xml'

# 카메라 설정
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# VLC 스트리밍을 위한 포트 및 주소 설정
stream_address = '127.0.0.1'
stream_port = '8080'
stream_url = f'vlc://{stream_address}:{stream_port}/'

# VLC 프로세스 시작 및 스트리밍 시작
vlc_cmd = f"cvlc v4l2:///dev/video0 --sout '#transcode{{vcodec=mp2v}}:duplicate{{dst=display,dst=rtp{{sdp=rtsp://{stream_address}:{stream_port}/}}}}' --no-sout-all --ttl=1"
os.system(vlc_cmd)

# 얼굴 인식을 위한 캐스케이드 분류기 초기화
face_cascade = cv2.CascadeClassifier(face_cascade_path)

# 사진 촬영 및 블루투스 전송을 위한 루프 시작
while True:
    # 프레임 읽기
    ret, frame = cap.read()

    # 얼굴 인식
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # 인식된 얼굴에 사각형 표시 및 사진 촬영
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        file_path = f'/home/pi/Pictures/{time.time()}.jpg'
        cv2.imwrite(file_path, frame)

        # 블루투스 서버로 파일 전송
        send_file_bt(file_path)

    # 화면에 프레임 표시
    cv2.imshow('frame', frame)

    # 종료 조건
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# 종료
cap.release()
cv2.destroyAllWindows()
